name: ios
on:
  # Triggers workflow on PR but only for main branch
  pull_request:
    branches: [ main ]
    paths:
      - 'ios/**'
      - '.github/workflows/ios.yml'
      - 'pubspec.yaml'
  push:
    # for release
    tags:
      - "v*.*.*"
  
  # Allows manual trigger from Actions tab
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Adds env.json
      env:
        ENV_JSON: ${{ secrets.ENV_JSON }}
      run: echo $ENV_JSON > env.json
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        WEB_EXT_INSTALLER_CERTIFICATE_BASE64: ${{ secrets.WEB_EXT_INSTALLER_CERTIFICATE_BASE64 }}
        WEB_EXT_APPLICATION_CERTIFICATE_BASE64: ${{ secrets.WEB_EXT_APPLICATION_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        RUNNER_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.RUNNER_BUILD_PROVISION_PROFILE_BASE64 }}
        SHARE_EXT_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.SHARE_EXT_BUILD_PROVISION_PROFILE_BASE64 }}
        WEB_EXT_PROVISION_PROFILE_BASE64: ${{ secrets.WEB_EXT_BUILD_PROVISION_PROFILE_BASE64 }}
        WEB_EXT_EXT_PROVISION_PROFILE_BASE64: ${{ secrets.WEB_EXT_EXT_BUILD_PROVISION_PROFILE_BASE64 }}
        NOTE_LIST_WIDGET_EXT_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.NOTE_LIST_WIDGET_EXT_BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # https://medium.com/team-rockstars-it/the-easiest-way-to-build-a-flutter-ios-app-using-github-actions-plus-a-key-takeaway-for-developers-48cf2ad7c72a
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        WEB_EXT_INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/web_ext_installer_certificate.p12
        WEB_EXT_APPLICATION_CERTIFICATE_PATH=$RUNNER_TEMP/web_ext_application_certificate.p12
        RUNNER_PP_PATH=$RUNNER_TEMP/runner_build_pp.mobileprovision
        SHARE_EXT_PP_PATH=$RUNNER_TEMP/share_ext_build_pp.mobileprovision
        NOTE_LIST_WIDGET_EXT_PP_PATH=$RUNNER_TEMP/note_list_widget_ext_build_pp.mobileprovision
        WEB_EXT_PP_PATH=$RUNNER_TEMP/web_ext_build_pp.provisionprofile
        WEB_EXT_EXT_PP_PATH=$RUNNER_TEMP/web_ext_ext_build_pp.provisionprofile
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
        echo -n "$WEB_EXT_INSTALLER_CERTIFICATE_BASE64" | base64 --decode --output $WEB_EXT_INSTALLER_CERTIFICATE_PATH
        echo -n "$WEB_EXT_APPLICATION_CERTIFICATE_BASE64" | base64 --decode --output $WEB_EXT_APPLICATION_CERTIFICATE_PATH
        echo -n "$RUNNER_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $RUNNER_PP_PATH
        echo -n "$SHARE_EXT_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $SHARE_EXT_PP_PATH
        echo -n "$NOTE_LIST_WIDGET_EXT_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $NOTE_LIST_WIDGET_EXT_PP_PATH
        echo -n "$WEB_EXT_PROVISION_PROFILE_BASE64" | base64 --decode --output $WEB_EXT_PP_PATH
        echo -n "$WEB_EXT_EXT_PROVISION_PROFILE_BASE64" | base64 --decode --output $WEB_EXT_EXT_PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        # note: i accidentally used keychain_pw instead of p12 pw here
        security import $WEB_EXT_INSTALLER_CERTIFICATE_PATH -P "$KEYCHAIN_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH 
        security import $WEB_EXT_APPLICATION_CERTIFICATE_PATH -P "$KEYCHAIN_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $RUNNER_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        cp $SHARE_EXT_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        cp $NOTE_LIST_WIDGET_EXT_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        cp $WEB_EXT_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        cp $WEB_EXT_EXT_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.13.5'
        cache: true
        channel: 'stable'
    - run: flutter doctor -v
    - run: flutter pub get
    # build ios release
    - run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist -v --dart-define-from-file=env.json
    # build safari ext release
    - run: |
        ./build_web_ext.sh
        cd safari
        xcodebuild -scheme "Fleeting Notes" -archivePath ../build/FN.xcarchive archive
        xcodebuild -exportArchive -archivePath ../build/FN.xcarchive -exportOptionsPlist Fleeting\ Notes/ExportOptions.plist -exportPath ../build
    - run: cp build/ios/ipa/Fleeting\ Notes.ipa build/FleetingNotesIOS.ipa
    - run: mv build/Fleeting\ Notes.pkg build/FleetingNotesSafari.pkg
    - uses: softprops/action-gh-release@v1 
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          build/*.ipa
          build/*.pkg
        draft: true
        fail_on_unmatched_files: true
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm -rf ~/Library/MobileDevice/Provisioning\ Profiles
